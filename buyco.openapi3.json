{
  "openapi": "3.0.3",
  "info": {
    "title": "BuyCo API",
    "version": "2.0",
    "description": ""
  },
  "servers": [
    {
      "url": "https://{environment}.buyco.co/api/v2",
      "variables": {
        "environment": {
          "description": "\"app.staging\" must be used for testing and \"app\" for production.",
          "default": "app.staging",
          "enum": [
            "app",
            "app.staging"
          ]
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Shipments",
      "description": ""
    },
    {
      "name": "AsyncOperations",
      "description": ""
    },
    {
      "name": "AsyncContainerSnapshots",
      "description": ""
    },
    {
      "name": "AsyncOrganizations",
      "description": ""
    },
    {
      "name": "AsyncPersons",
      "description": ""
    }
  ],
  "paths": {
    "/shipments": {
      "post": {
        "summary": "Create a shipment",
        "tags": [
          "Shipments"
        ],
        "operationId": "CreateShipment",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "description": "Failed to create",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRes"
                }
              }
            }
          }
        }
      }
    },
    "/shipments/{buyco_reference}": {
      "put": {
        "summary": "Update a shipment",
        "tags": [
          "Shipments"
        ],
        "operationId": "UpdateShipment",
        "parameters": [
          {
            "in": "path",
            "name": "buyco_reference",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShipmentMutation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "500": {
            "description": "Failed to update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRes"
                }
              }
            }
          }
        }
      }
    },
    "/shipments/{buyco_reference}/summary": {
      "get": {
        "summary": "Retrieve a shipment summary",
        "tags": [
          "Shipments"
        ],
        "operationId": "GetShipmentSummary",
        "parameters": [
          {
            "in": "path",
            "name": "buyco_reference",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShipmentSummaryRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundRes"
                }
              }
            }
          }
        }
      }
    },
    "/async-operations": {
      "get": {
        "summary": "List async operations",
        "tags": [
          "AsyncOperations"
        ],
        "operationId": "GetAsyncOperations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationsRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/async-operations/{id}": {
      "get": {
        "summary": "Retrieve an async operation",
        "tags": [
          "AsyncOperations"
        ],
        "operationId": "GetAsyncOperation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncOperationRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/container-snapshots/async-create": {
      "post": {
        "summary": "Create container snapshots",
        "tags": [
          "AsyncContainerSnapshots"
        ],
        "operationId": "AsyncCreateContainerSnapshots",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "container_snapshots": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ContainerSnapshot"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/containers-snapshots/async-update": {
      "post": {
        "summary": "Update container snapshots",
        "tags": [
          "AsyncContainerSnapshots"
        ],
        "operationId": "AsyncUpdateContainerSnapshots",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "container_snapshots": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ContainerSnapshot"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/container-snapshots/async-delete": {
      "post": {
        "summary": "Delete container snapshots",
        "tags": [
          "AsyncContainerSnapshots"
        ],
        "operationId": "AsyncDeleteContainerSnapshots",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/container-snapshots/external-id/{external_id}": {
      "get": {
        "summary": "Retrieve a container snapshot by external ID",
        "tags": [
          "AsyncContainerSnapshots"
        ],
        "operationId": "GetContainerSnapshotByExternalId",
        "parameters": [
          {
            "in": "path",
            "name": "external_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success or Not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetContainerSnapshotRes"
                    },
                    {
                      "$ref": "#/components/schemas/HttpNotFoundRes"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/container-snapshots/{id}": {
      "get": {
        "summary": "Retrieve a container snapshot by ID",
        "tags": [
          "AsyncContainerSnapshots"
        ],
        "operationId": "GetContainerSnapshotById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success or Not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetContainerSnapshotRes"
                    },
                    {
                      "$ref": "#/components/schemas/HttpNotFoundRes"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/organizations/async-create": {
      "post": {
        "summary": "Create organizations",
        "tags": [
          "AsyncOrganizations"
        ],
        "operationId": "AsyncCreateOrganizations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organizations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AsyncOrganization"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/organizations/async-update": {
      "post": {
        "summary": "Update organizations",
        "tags": [
          "AsyncOrganizations"
        ],
        "operationId": "AsyncUpdateOrganizations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organizations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AsyncOrganization"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/organizations/async-delete": {
      "post": {
        "summary": "Delete organizations",
        "tags": [
          "AsyncOrganizations"
        ],
        "operationId": "AsyncDeleteOrganizations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/persons/async-create": {
      "post": {
        "summary": "Create persons",
        "tags": [
          "AsyncPersons"
        ],
        "operationId": "AsyncCreatePersons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "persons": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/persons_Person"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/persons/async-update": {
      "post": {
        "summary": "Update persons",
        "tags": [
          "AsyncPersons"
        ],
        "operationId": "AsyncUpdatePersons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "persons": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/persons_Person"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    },
    "/persons/async-delete": {
      "post": {
        "summary": "Delete persons",
        "tags": [
          "AsyncPersons"
        ],
        "operationId": "AsyncDeletePersons",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/AcceptedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ContainerType": {
        "type": "string",
        "enum": [
          "GENERAL",
          "THERMAL",
          "OPEN_TOP",
          "TANK"
        ],
        "description": "- GENERAL: General purpose container (standard DRY). Non-ventilated.\n- THERMAL: Thermal container (REEFER): refrigerated, heated, or insulated.\n- OPEN_TOP: Open top, tunnel, open sides, etc...\n- TANK: Tank container."
      },
      "ContainerSize": {
        "type": "string",
        "enum": [
          "20",
          "40",
          "40HC"
        ]
      },
      "ContainerGrade": {
        "type": "string",
        "enum": [
          "FOOD"
        ]
      },
      "SealType": {
        "type": "string",
        "enum": [
          "SHIPPER",
          "CARRIER",
          "CUSTOMS"
        ]
      },
      "Seal": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SealType"
          }
        },
        "required": [
          "number",
          "type"
        ]
      },
      "KeyValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "PhysicalContainer": {
        "type": "object",
        "description": "The actual real-world container.",
        "properties": {
          "identification_number": {
            "type": "string",
            "nullable": true,
            "description": "Container BIC identification number, including check digit.",
            "example": "BEAU5124450"
          },
          "size_type_code": {
            "type": "string",
            "nullable": true,
            "description": "4 character [ISO 6346](https://www.bic-code.org/wp-content/uploads/2018/01/SizeAndType-Table1-3.pdf) size and type code.",
            "example": "22G1"
          },
          "tare_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Tare (unladen) weight, in grams."
          },
          "max_gross_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Maximum gross (laden) weight, in grams."
          }
        }
      },
      "ThermalSpecs": {
        "type": "object",
        "description": "Extra specifications for a thermal (refrigerated or heated) container.",
        "properties": {
          "ventilation_cm3_hour": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Ventilation requirements in cubic centimeters per hour."
          },
          "temperature_celsius": {
            "type": "string",
            "nullable": true,
            "description": "The temperature requirements in degrees Celsius."
          },
          "humidity_percent": {
            "type": "string",
            "nullable": true,
            "description": "Humidity requirements in percentage."
          }
        },
        "required": [
          "ventilation_cm3_hour",
          "temperature_celsius"
        ]
      },
      "VentilationSpecs": {
        "type": "object",
        "description": "Extra specifications for a ventilated container.",
        "properties": {
          "ventilation_cm3_hour": {
            "type": "integer",
            "format": "int32",
            "description": "Ventilation requirements in cubic centimeters per hour."
          }
        },
        "required": [
          "ventilation_cm3_hour"
        ]
      },
      "OpenTopSpecs": {
        "type": "object",
        "description": "Extra specifications for an open-top container.",
        "properties": {
          "out_of_gauge_mm": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "out_of_gauge_mm"
        ]
      },
      "TankSpecs": {
        "type": "object",
        "description": "Extra specifications for a tank container.",
        "properties": {
          "pressure_kpa": {
            "type": "integer",
            "format": "int32",
            "description": "Pressure requirements, in Kilopascals."
          },
          "temperature_celsius": {
            "type": "string",
            "nullable": true,
            "description": "The temperature requirements in Celsius."
          }
        },
        "required": [
          "pressure_kpa",
          "temperature_celsius"
        ]
      },
      "PackageSpec": {
        "type": "object",
        "description": "Specifications of a package.",
        "properties": {
          "package_type_code": {
            "type": "string",
            "description": "The code of the package type - UNECE 2-alphanumeric package code we increase the limitation to 10 in order to manage the exceptions."
          },
          "gross_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The gross weight in grams."
          },
          "net_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The net weight in grams."
          },
          "volume_cm3": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The volume in cubic centimeters."
          },
          "height_mm": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The height in millimeters."
          },
          "length_mm": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The length in millimeters."
          },
          "width_mm": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The width in millimeters."
          }
        },
        "required": [
          "package_type_code"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "piece_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "description": "Stock Keeping Unit."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Name / Identifier."
          },
          "harmonized_system_code": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "piece_count",
          "sku",
          "name",
          "harmonized_system_code"
        ]
      },
      "DateOptionalTime": {
        "type": "object",
        "description": "Date and optional time in ISO 8601 formats.",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "YYYY-MM-DD ISO 8601 format."
          },
          "time": {
            "type": "string",
            "nullable": true,
            "description": "optional, hh:mm:ss ISO 8601 format."
          }
        },
        "required": [
          "date",
          "time"
        ]
      },
      "FacilityType": {
        "type": "string",
        "enum": [
          "POTE",
          "INTE",
          "CLOC",
          "COYA",
          "DEPO",
          "COFS"
        ],
        "description": "A type of Facility - DCSA definitions.\n\n- POTE : Port Terminal.\n- INTE : Inland Terminal (aka. Dry Port) e.g. Rail Ramp (USDET, USPIT).\n- CLOC : Customer Location.\n- COYA : Container Yard.\n- DEPO : Depot.\n- COFS : Container Freight Station."
      },
      "UNLocationCode": {
        "type": "string",
        "description": "5-char UN Location Code."
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string"
          },
          "street_bis": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string"
          },
          "postal_code": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country_code": {
            "type": "string"
          }
        },
        "required": [
          "street",
          "city",
          "country_code"
        ]
      },
      "Phone": {
        "type": "string"
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "external_id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "tax_identifier": {
            "type": "string",
            "nullable": true
          },
          "official_identifier": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "Facility": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FacilityType"
          },
          "unlocode": {
            "$ref": "#/components/schemas/UNLocationCode",
            "nullable": true
          },
          "organization": {
            "$ref": "#/components/schemas/Organization",
            "nullable": true
          },
          "organization_external_id": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "Cargo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "external_id": {
            "type": "string",
            "nullable": true,
            "description": "An external (client-side) identifier."
          },
          "sales_order_number": {
            "type": "string",
            "nullable": true,
            "description": "The sales order number of the seller."
          },
          "purchase_order_number": {
            "type": "string",
            "nullable": true,
            "description": "The purchase order number of the buyer."
          },
          "delivery_number": {
            "type": "string",
            "nullable": true,
            "description": "The delivery number (ie: for warehouse)."
          },
          "marks_and_numbers": {
            "type": "string",
            "nullable": true,
            "description": "Marks and numbers as written on the packages."
          },
          "invoice_number": {
            "type": "string",
            "nullable": true,
            "description": "The invoice number, generated by the seller."
          },
          "additional_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValue"
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A general description or any additional information."
          },
          "gross_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The cargo total gross weight in grams."
          },
          "net_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The cargo total net weight in grams."
          },
          "volume_cm3": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The cargo total volume in cubic centimeters."
          },
          "package_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "Number of packages."
          },
          "package_spec": {
            "$ref": "#/components/schemas/PackageSpec"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "readiness_date": {
            "$ref": "#/components/schemas/DateOptionalTime"
          },
          "origin": {
            "$ref": "#/components/schemas/Facility",
            "nullable": true
          },
          "delivery": {
            "$ref": "#/components/schemas/Facility",
            "nullable": true
          }
        }
      },
      "Container": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "external_id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ContainerType"
          },
          "size": {
            "$ref": "#/components/schemas/ContainerSize"
          },
          "grade": {
            "$ref": "#/components/schemas/ContainerGrade"
          },
          "shipper_owned": {
            "type": "boolean"
          },
          "seals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Seal"
            }
          },
          "stuffing_reference": {
            "type": "string",
            "nullable": true
          },
          "additional_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValue"
            }
          },
          "measured_weight_g": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "physical_container": {
            "$ref": "#/components/schemas/PhysicalContainer",
            "nullable": true
          },
          "thermal_specs": {
            "$ref": "#/components/schemas/ThermalSpecs",
            "nullable": true
          },
          "ventilation_specs": {
            "$ref": "#/components/schemas/VentilationSpecs",
            "nullable": true
          },
          "open_top_specs": {
            "$ref": "#/components/schemas/OpenTopSpecs",
            "nullable": true
          },
          "tank_specs": {
            "$ref": "#/components/schemas/TankSpecs",
            "nullable": true
          },
          "cargoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cargo"
            }
          }
        },
        "required": [
          "type",
          "size"
        ]
      },
      "IncotermCode": {
        "type": "string",
        "enum": [
          "FOB",
          "CFR",
          "FAS",
          "CIF",
          "EXW",
          "FCA",
          "CPT",
          "CIP",
          "DAP",
          "DPU",
          "DDP",
          "DAT",
          "DAF",
          "DES",
          "DEQ",
          "DDU"
        ],
        "description": "- FOB: Free On Board.\n- CFR: Cost and Freight.\n- FAS: Free Alongside Ship.\n- CIF: Cost, Insurance & Freight.\n- EXW: Ex Works.\n- FCA: Free Carrier.\n- CPT: Carriage Paid To.\n- CIP: Carriage and Insurance Paid to.\n- DAP: Delivered At Place.\n- DPU: Delivered At Place Unloaded.\n- DDP: Delivered Duty Paid.\n- DAT: Delivered At Terminal.\n- DAF: Delivered At Frontier.\n- DES: Delivered Ex Ship.\n- DEQ: Delivered Ex Quay (duty paid).\n- DDU: Delivered Duty Unpaid."
      },
      "Incoterm": {
        "type": "object",
        "description": "Incoterm - International Commercial Terms.",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/IncotermCode"
          },
          "location_unlocode": {
            "$ref": "#/components/schemas/UNLocationCode",
            "nullable": true
          }
        },
        "required": [
          "code"
        ]
      },
      "RoutingInstructions": {
        "type": "object",
        "properties": {
          "incoterm": {
            "$ref": "#/components/schemas/Incoterm"
          },
          "ship_from": {
            "$ref": "#/components/schemas/Facility"
          },
          "ship_to": {
            "$ref": "#/components/schemas/Facility"
          },
          "ship_via": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Facility"
            },
            "description": "Optional, to specify constraints (e.g. via a POL or POD)."
          },
          "pre_ship_from": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Facility"
            }
          },
          "post_ship_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Facility"
            }
          },
          "ship_from_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ship_to_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "carrier_instructions": {
            "type": "string",
            "nullable": true,
            "description": "Free text, sent to the carrier in a booking request."
          }
        },
        "description": "<code>ship_from</code> and <code>ship_to</code> are used to select a sailing schedule (including carrier haulage).\nThey can be a port, an inland customer location, or other facility type.\n\nAdditional routing information (merchant haulage) can be specified with <code>pre_ship_from</code> and <code>post_ship_to</code>."
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "external_id": {
            "type": "string",
            "nullable": true
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email"
        ]
      },
      "PartyRole": {
        "type": "string",
        "enum": [
          "FORWARDER",
          "SHIPPER",
          "CONSIGNEE",
          "BANK",
          "NOTIFY_1",
          "NOTIFY_2",
          "NOTIFY_3",
          "SELLER"
        ],
        "description": "A party's role carries certain rights and responsibilities, which depend on the model the role is applied to.\n\n- SHIPPER: Responsible for the shipment (usually the producer or the owner of the goods).\n- CONSIGNEE: Responsible for receiving the goods (usually the buyer of the goods).\n- FORWARDER: Arranges transport of goods on behalf of either the seller or buyer\n- NOTIFY_1: Responsible for arranging the arrival formalities of the vessel.\n- NOTIFY_2: Responsible for arranging the arrival formalities of the vessel.\n- NOTIFY_3: Responsible for arranging the arrival formalities of the vessel.\n- SELLER: Non-standard role; only for use with BuyCo."
      },
      "PartyRoleReference": {
        "type": "object",
        "description": "The party's role and associated reference for the entity (container, shipment, etc).",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/PartyRole"
          },
          "reference": {
            "type": "string",
            "nullable": true,
            "description": "The document or file reference used by the party."
          }
        },
        "required": [
          "role"
        ]
      },
      "Party": {
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/Organization",
            "nullable": true
          },
          "organization_external_id": {
            "type": "string",
            "nullable": true
          },
          "person": {
            "$ref": "#/components/schemas/Person",
            "nullable": true
          },
          "person_external_id": {
            "type": "string",
            "nullable": true
          },
          "role_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyRoleReference"
            }
          }
        },
        "required": [
          "role_references"
        ],
        "description": "A Party is either an organization or a person.\nIt is associated with role(s) and possibly reference(s).\nThe organization or person can be provided fully, or referred to by an external id."
      },
      "AclCodes": {
        "type": "string",
        "enum": [
          "RESTRICTED",
          "FULL_ACCESS",
          "LIMITED"
        ],
        "example": "FULL_ACCESS"
      },
      "Participant": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "acl_code": {
            "$ref": "#/components/schemas/AclCodes"
          }
        },
        "anyOf": [
          {
            "required": [
              "user_id",
              "acl_code"
            ]
          },
          {
            "required": [
              "email",
              "acl_code"
            ]
          }
        ]
      },
      "Shipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the shipment, aka as 'BuyCo Ref'.",
            "example": "Q0219210015"
          },
          "external_id": {
            "type": "string",
            "nullable": true,
            "description": "An optional 3rd party id, which can be used to refer to the shipment."
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "description": "The containers attached to the shipment."
          },
          "routing_instructions": {
            "$ref": "#/components/schemas/RoutingInstructions"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          },
          "bl_properties": {
            "type": "object"
          },
          "bl_properties_template_id": {
            "type": "string",
            "nullable": true
          },
          "general_instructions": {
            "type": "string",
            "nullable": true
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          },
          "data": {
            "type": "object",
            "deprecated": true,
            "description": "For legacy compatibility",
            "properties": {
              "external_id": {
                "type": "string",
                "nullable": true
              },
              "bl_properties_template_id": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "required": [
          "containers",
          "routing_instructions",
          "parties"
        ]
      },
      "ShipmentRes": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "Q0219210015"
          }
        }
      },
      "UnauthorizedRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Invalid JWT token : Expired Signature (exp)"
          }
        }
      },
      "ApiErrorRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Api error"
          },
          "details": {
            "type": "string",
            "description": "A human readable error message."
          }
        }
      },
      "ShipmentMutation": {
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "nullable": true,
            "description": "An optional 3rd party id, which can be used to refer to the shipment."
          },
          "containers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "description": "The containers attached to the shipment."
          },
          "routing_instructions": {
            "$ref": "#/components/schemas/RoutingInstructions"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          },
          "bl_properties": {
            "type": "object"
          },
          "bl_properties_template_id": {
            "type": "string",
            "nullable": true
          },
          "general_instructions": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "type": "object",
            "deprecated": true,
            "description": "For legacy compatibility",
            "properties": {
              "external_id": {
                "type": "string",
                "nullable": true
              },
              "bl_properties_template_id": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "required": [
          "external_id"
        ]
      },
      "ShipmentStatus": {
        "type": "string",
        "default": "UNSPECIFIED",
        "enum": [
          "UNSPECIFIED",
          "OPEN",
          "CANCELED",
          "DELETED"
        ]
      },
      "LocalDateOptionalTime": {
        "type": "object",
        "description": "A local date and optional time, in ISO 8601 formats.",
        "properties": {
          "local_date": {
            "type": "string",
            "description": "Local date, YYYY-MM-DD ISO 8601 format."
          },
          "local_time": {
            "type": "string",
            "description": "Local time, optional, hh:mm:ss ISO 8601 format."
          }
        }
      },
      "MaritimeCutoffDates": {
        "type": "object",
        "properties": {
          "vgm": {
            "$ref": "#/components/schemas/LocalDateOptionalTime"
          },
          "terminal": {
            "$ref": "#/components/schemas/LocalDateOptionalTime"
          },
          "document": {
            "$ref": "#/components/schemas/LocalDateOptionalTime"
          }
        }
      },
      "Carrier": {
        "type": "object",
        "properties": {
          "scac": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "BookingStatus": {
        "type": "string",
        "default": "UNSPECIFIED",
        "enum": [
          "UNSPECIFIED",
          "NONE",
          "DRAFT",
          "SENT",
          "PENDING",
          "CONFIRMED",
          "CANCELED",
          "DECLINED",
          "FAILED",
          "AMEND_REQUESTED"
        ]
      },
      "ShipmentTimes": {
        "type": "object",
        "properties": {
          "departure": {
            "$ref": "#/components/schemas/LocalDateOptionalTime"
          },
          "arrival": {
            "$ref": "#/components/schemas/LocalDateOptionalTime"
          }
        }
      },
      "ContainerSnapshotDataSizeClass": {
        "type": "string",
        "default": "SIZE_UNSPECIFIED",
        "enum": [
          "SIZE_UNSPECIFIED",
          "SIZE_20",
          "SIZE_40",
          "SIZE_45",
          "SIZE_40HC",
          "SIZE_45HC",
          "SIZE_48HC",
          "SIZE_53HC",
          "SIZE_20HC"
        ],
        "description": "Simplified size representation, mapped to ISO codes internally.\n\n- SIZE_20: 20 foot\n- SIZE_40: 40 foot\n- SIZE_45: 45 foot\n- SIZE_40HC: 40 foot high cube\n- SIZE_45HC: 45 foot high cube\n- SIZE_48HC: 48 foot high cube\n- SIZE_53HC: 53 foot high cube\n- SIZE_20HC: 20 foot high cube"
      },
      "ContainerSnapshotDataTypeClass": {
        "type": "string",
        "default": "GENERAL",
        "enum": [
          "GENERAL",
          "THERMAL",
          "OPEN_TOP",
          "TANK",
          "VENTILATED",
          "BULK",
          "PLATFORM",
          "SPECIAL",
          "AIR_SURFACE"
        ],
        "description": "Type class, mapped to specific ISO codes internally.\n\n- GENERAL: General purpose container (standard DRY). Non-ventilated.\n- THERMAL: Thermal container (REEFER): refrigerated, heated, or insulated.\n- OPEN_TOP: Open top, tunnel, open sides, etc...\n- TANK: Tank container.\n- VENTILATED: Ventilated dry (Coffee).\n- BULK: Dry bulk.\n- PLATFORM: Flat platform.\n- SPECIAL: Specialty, named (i.e. animal carrier).\n- AIR_SURFACE: Air / Surface."
      },
      "ContainerSnapshotDataSeals": {
        "type": "object",
        "description": "Seal numbers on a container.",
        "properties": {
          "carrier": {
            "type": "string",
            "description": "Carrier's seal number."
          },
          "shipper": {
            "type": "string",
            "description": "Shipper's seal number."
          },
          "customs": {
            "type": "string"
          },
          "quarantine_agency": {
            "type": "string"
          },
          "terminal_operator": {
            "type": "string"
          }
        }
      },
      "ContainerSnapshotDataGrade": {
        "type": "string",
        "default": "GRADE_UNSPECIFIED",
        "enum": [
          "GRADE_UNSPECIFIED",
          "FOOD_GRADE"
        ],
        "description": "- GRADE_UNSPECIFIED: No specific grade required.\n- FOOD_GRADE: Food grade required."
      },
      "FixedDecimal": {
        "type": "object",
        "properties": {
          "units": {
            "type": "integer",
            "format": "int64",
            "description": "Whole units part of the amount."
          },
          "nanos": {
            "type": "integer",
            "format": "int32",
            "description": "Nano units of the amount (10^-9).\nMust be same sign as units.\nExample: The value -1.25 is represented as units=-1 and nanos=-250000000."
          }
        }
      },
      "ContainerSnapshotDataThermalSpecs": {
        "type": "object",
        "description": "Extra specifications for a thermal (Reefer or Heated) container.",
        "properties": {
          "ventilation_cm3_hour": {
            "type": "integer",
            "format": "int32",
            "description": "Ventilation requirements in cubic centimeters per hour."
          },
          "temperature_celsius": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FixedDecimal"
              }
            ],
            "description": "The temperature requirements in degrees Celsius."
          },
          "humidity_percent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FixedDecimal"
              }
            ],
            "description": "Humidity requirements in percentage."
          }
        }
      },
      "ContainerSnapshotDataTankSpecs": {
        "type": "object",
        "description": "Extra specifications for a tank container.",
        "properties": {
          "pressure_kpa": {
            "type": "integer",
            "format": "int32",
            "description": "Pressure requirements, in Kilopascals."
          },
          "temperature_celsius": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FixedDecimal"
              }
            ],
            "description": "The temperature requirements in Celsius."
          }
        }
      },
      "ContainerSnapshotData": {
        "type": "object",
        "description": "Represents a container at various steps in the shipment process.",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "An external (client-side) identifier."
          },
          "size_class": {
            "$ref": "#/components/schemas/ContainerSnapshotDataSizeClass"
          },
          "type_class": {
            "$ref": "#/components/schemas/ContainerSnapshotDataTypeClass"
          },
          "stuffing_reference": {
            "type": "string"
          },
          "shipper_owned": {
            "type": "boolean",
            "description": "Whether the shipper owns the container."
          },
          "seals": {
            "$ref": "#/components/schemas/ContainerSnapshotDataSeals"
          },
          "measured_weight_g": {
            "type": "string",
            "format": "int64",
            "description": "Measured weight of the container and its cargo, in grams. Verified Gross Mass."
          },
          "additional_references": {
            "type": "object",
            "description": "Key: value pairs of additional references.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "grouping_rule_code": {
            "type": "string",
            "description": "A rule code for grouping containers into shipments. The rule code must already be present."
          },
          "grade": {
            "$ref": "#/components/schemas/ContainerSnapshotDataGrade"
          },
          "ventilation_specs": {
            "$ref": "#/components/schemas/VentilationSpecs"
          },
          "thermal_specs": {
            "$ref": "#/components/schemas/ContainerSnapshotDataThermalSpecs"
          },
          "open_top_specs": {
            "$ref": "#/components/schemas/OpenTopSpecs"
          },
          "tank_specs": {
            "$ref": "#/components/schemas/ContainerSnapshotDataTankSpecs"
          }
        }
      },
      "ContainerSnapshotPhysicalContainer": {
        "type": "object",
        "description": "The actual real-world container.",
        "properties": {
          "iso_size_type": {
            "type": "string",
            "description": "4 character ISO size and type code.",
            "example": "22G1"
          },
          "identification_number": {
            "type": "string",
            "description": "Container BIC identification number, including check digit.",
            "example": "BEAU5124450"
          },
          "tare_weight_g": {
            "type": "integer",
            "format": "int64",
            "description": "Tare (unladen) weight, in grams."
          },
          "max_gross_weight_g": {
            "type": "integer",
            "format": "int64",
            "description": "Maximum gross (laden) weight, in grams."
          }
        }
      },
      "ContainerSnapshotProductData": {
        "type": "object",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit."
          },
          "name": {
            "type": "string",
            "description": "Name / Identifier."
          },
          "harmonized_system_code": {
            "type": "string"
          }
        }
      },
      "ContainerSnapshotPackagedProduct": {
        "type": "object",
        "description": "Product description and associated quantity.",
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32",
            "description": "The number of products."
          },
          "product": {
            "$ref": "#/components/schemas/ContainerSnapshotProductData"
          }
        }
      },
      "ContainerSnapshotDangerousGood": {
        "type": "object",
        "description": "Information for shipping a dangerous good (hazmat).",
        "properties": {
          "un_number": {
            "type": "string",
            "description": "UN number."
          },
          "emergency_contact_id": {
            "type": "string",
            "description": "emergency contact id for dangerous good."
          }
        }
      },
      "ContainerSnapshotCargoData": {
        "type": "object",
        "properties": {
          "external_id": {
            "type": "string",
            "description": "An external (client-side) identifier."
          },
          "sales_order_number": {
            "type": "string",
            "description": "The sales order number of the seller."
          },
          "purchase_order_number": {
            "type": "string",
            "description": "The purchase order number of the buyer."
          },
          "delivery_number": {
            "type": "string",
            "description": "The delivery number (ie: for warehouse)."
          },
          "shipment_number": {
            "type": "string",
            "description": "The shipment number (ie: to port)."
          },
          "description": {
            "type": "string",
            "description": "A general description or any additional information."
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number, generated by the seller."
          },
          "marks_and_numbers": {
            "type": "string",
            "description": "Marks and numbers as written on the packages."
          },
          "additional_references": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "gross_weight_g": {
            "type": "integer",
            "format": "int64",
            "description": "The cargo total gross weight in grams."
          },
          "net_weight_g": {
            "type": "integer",
            "format": "int64",
            "description": "The cargo total net weight in grams."
          },
          "volume_cm3": {
            "type": "integer",
            "format": "int64",
            "description": "The cargo total volume in cubic centimeters."
          },
          "package_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of packages."
          },
          "package_spec": {
            "$ref": "#/components/schemas/PackageSpec"
          },
          "packaged_products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerSnapshotPackagedProduct"
            }
          },
          "dangerous_good": {
            "$ref": "#/components/schemas/ContainerSnapshotDangerousGood"
          }
        }
      },
      "ContainerSnapshotRouteLocation": {
        "type": "object",
        "description": "A location specification.",
        "properties": {
          "organization_external_id": {
            "type": "string"
          },
          "person_external_id": {
            "type": "string"
          },
          "unlocode": {
            "type": "string",
            "description": "UN/Locode."
          }
        }
      },
      "ContainerSnapshotCargoRouteLocations": {
        "type": "object",
        "description": "Locations along the cargo's route.",
        "properties": {
          "stuffing_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerSnapshotRouteLocation"
              }
            ],
            "description": "The location at which the cargo is stuffed in the container."
          },
          "unstuffing_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerSnapshotRouteLocation"
              }
            ],
            "description": "The location at which the cargo is unstuffed from the container."
          }
        }
      },
      "ContainerSnapshotRouteDatesTimes": {
        "type": "object",
        "description": "Dates and times of a cargo's route milestones.",
        "properties": {
          "stuffing_readiness": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalDateOptionalTime"
              }
            ],
            "description": "The date (and when possible time) at which the cargo may be stuffed in a container."
          }
        }
      },
      "ContainerSnapshotCargoRoute": {
        "type": "object",
        "description": "Specify how to route a cargo.",
        "properties": {
          "locations": {
            "$ref": "#/components/schemas/ContainerSnapshotCargoRouteLocations"
          },
          "dates_times": {
            "$ref": "#/components/schemas/ContainerSnapshotRouteDatesTimes"
          }
        }
      },
      "ContainerSnapshotCargo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContainerSnapshotCargoData"
          },
          "route": {
            "$ref": "#/components/schemas/ContainerSnapshotCargoRoute"
          }
        }
      },
      "RouteIncotermCode": {
        "type": "string",
        "default": "INCOTERM_UNSPECIFIED",
        "enum": [
          "INCOTERM_UNSPECIFIED",
          "FOB",
          "CFR",
          "FAS",
          "CIF",
          "EXW",
          "FCA",
          "CPT",
          "CIP",
          "DAP",
          "DPU",
          "DDP",
          "DAT",
          "DAF",
          "DES",
          "DEQ",
          "DDU"
        ],
        "description": "- FOB: Free On Board.\n- CFR: Cost and Freight.\n- FAS: Free Alongside Ship.\n- CIF: Cost, Insurance & Freight.\n- EXW: Ex Works.\n- FCA: Free Carrier.\n- CPT: Carriage Paid To.\n- CIP: Carriage and Insurance Paid to.\n- DAP: Delivered At Place.\n- DPU: Delivered At Place Unloaded.\n- DDP: Delivered Duty Paid.\n- DAT: Delivered At Terminal.\n- DAF: Delivered At Frontier.\n- DES: Delivered Ex Ship.\n- DEQ: Delivered Ex Quay (duty paid).\n- DDU: Delivered Duty Unpaid."
      },
      "RouteIncoterm": {
        "type": "object",
        "description": "Incoterm information for a route.",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/RouteIncotermCode"
          },
          "location_unlocode": {
            "type": "string",
            "description": "The UN/Locode at which terms apply."
          }
        }
      },
      "MoveType": {
        "type": "string",
        "default": "MOVE_TYPE_UNSPECIFIED",
        "enum": [
          "MOVE_TYPE_UNSPECIFIED",
          "PORT",
          "DOOR",
          "RAMP"
        ],
        "description": "- PORT: Port.\n- DOOR: Door (address).\n- RAMP: Ramp."
      },
      "RouteCarrierMoveType": {
        "type": "object",
        "description": "Defines which parts of the route will be handled by the carrier.",
        "properties": {
          "move_from": {
            "$ref": "#/components/schemas/MoveType"
          },
          "move_to": {
            "$ref": "#/components/schemas/MoveType"
          }
        }
      },
      "ContainerSnapshotMaritimeRouteData": {
        "type": "object",
        "description": "Base data for maritime routes.",
        "properties": {
          "incoterm": {
            "$ref": "#/components/schemas/RouteIncoterm"
          },
          "pol_unlocode": {
            "type": "string",
            "description": "UN/Locode of the Port of Loading."
          },
          "pod_unlocode": {
            "type": "string",
            "description": "UN/Locode of the Port of Discharge."
          },
          "carrier_move_type": {
            "$ref": "#/components/schemas/RouteCarrierMoveType",
            "description": "Define which part of the shipment the carrier is responsible for."
          },
          "instructions": {
            "type": "string",
            "description": "Any general instructions (visible to participants)."
          },
          "booking_instructions": {
            "type": "string",
            "description": "Instructions sent to the carrier during booking."
          }
        }
      },
      "ContainerSnapshotContainerRouteLocations": {
        "type": "object",
        "description": "Locations along the container's route.",
        "properties": {
          "collection_origin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerSnapshotRouteLocation"
              }
            ],
            "description": "The location through which the shipment originates."
          },
          "delivery_destination": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerSnapshotRouteLocation"
              }
            ],
            "description": "The location to which the shipment is destined."
          }
        }
      },
      "ContainerSnapshotContainerRouteDatesTimes": {
        "type": "object",
        "description": "Dates and times of a container's route milestones",
        "properties": {
          "collection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalDateOptionalTime"
              }
            ],
            "description": "The date and the time that the container needs to be collected from the origin."
          },
          "departure": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalDateOptionalTime"
              }
            ],
            "description": "The date (and when possible time) that the container should depart (port, door, ramp)."
          },
          "arrival": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalDateOptionalTime"
              }
            ],
            "description": "The date (and when possible time) that the container should arrive (port, door, ramp)."
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LocalDateOptionalTime"
              }
            ],
            "description": "The date (and when possible time) that the container needs to be delivered to the final destination."
          }
        }
      },
      "ContainerSnapshotContainerRoute": {
        "type": "object",
        "description": "Specify how to route a container.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContainerSnapshotMaritimeRouteData"
          },
          "locations": {
            "$ref": "#/components/schemas/ContainerSnapshotContainerRouteLocations"
          },
          "dates_times": {
            "$ref": "#/components/schemas/ContainerSnapshotContainerRouteDatesTimes"
          }
        }
      },
      "ShipmentSummaryPartyRole": {
        "type": "string",
        "enum": [
          "PARTY_ROLE_UNSPECIFIED",
          "SHIPPER",
          "CONSIGNEE",
          "FORWARDER",
          "NOTIFY_1",
          "NOTIFY_2",
          "NOTIFY_3",
          "SELLER"
        ],
        "default": "PARTY_ROLE_UNSPECIFIED",
        "description": "A party's role carries certain rights and responsibilities, which depend on the model the role is applied to.\n\n- SHIPPER: Responsible for the shipment (usually the producer or the owner of the goods).\n- CONSIGNEE: Responsible for receiving the goods (usually the buyer of the goods).\n- FORWARDER: Arranges transport of goods on behalf of either the seller or buyer\n- NOTIFY_1: Responsible for arranging the arrival formalities of the vessel.\n- NOTIFY_2: Responsible for arranging the arrival formalities of the vessel.\n- NOTIFY_3: Responsible for arranging the arrival formalities of the vessel.\n- SELLER: Non-standard role; only for use with BuyCo"
      },
      "ShipmentSummaryPartyRoleReference": {
        "type": "object",
        "description": "The party's role and associated reference for the entity (container, shipment, etc).",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ShipmentSummaryPartyRole"
          },
          "reference": {
            "type": "string",
            "description": "The document or file reference used by the party."
          }
        }
      },
      "ShipmentSummaryParty": {
        "type": "object",
        "properties": {
          "organization_external_id": {
            "type": "string"
          },
          "person_external_id": {
            "type": "string"
          },
          "role_references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentSummaryPartyRoleReference"
            }
          }
        }
      },
      "ContainerSnapshot": {
        "type": "object",
        "description": "A container and some extra information.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ContainerSnapshotData"
          },
          "physical_container": {
            "$ref": "#/components/schemas/ContainerSnapshotPhysicalContainer"
          },
          "cargoes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerSnapshotCargo"
            }
          },
          "route": {
            "$ref": "#/components/schemas/ContainerSnapshotContainerRoute"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentSummaryParty"
            }
          }
        }
      },
      "ShipmentSummaryTransportMode": {
        "type": "string",
        "default": "UNSPECIFIED",
        "enum": [
          "UNSPECIFIED",
          "VESSEL",
          "FEEDER",
          "BARGE",
          "TRUCK",
          "RAIL",
          "OTHER"
        ]
      },
      "ShipmentSummaryLeg": {
        "type": "object",
        "properties": {
          "pol_unlocode": {
            "type": "string"
          },
          "pod_unlocode": {
            "type": "string"
          },
          "voyage_number": {
            "type": "string"
          },
          "vessel_name": {
            "type": "string"
          },
          "service_name": {
            "type": "string"
          },
          "times": {
            "$ref": "#/components/schemas/ShipmentTimes"
          },
          "transit_time": {
            "type": "string"
          },
          "transport_mode": {
            "$ref": "#/components/schemas/ShipmentSummaryTransportMode"
          }
        }
      },
      "ShipmentSummaryRate": {
        "type": "object",
        "properties": {
          "contract_id": {
            "type": "string"
          },
          "organization_external_id": {
            "type": "string"
          },
          "person_external_id": {
            "type": "string"
          }
        }
      },
      "OperationalDiscrepancyEntity": {
        "type": "string",
        "default": "ENTITY_UNSPECIFIED",
        "enum": [
          "ENTITY_UNSPECIFIED",
          "SHIPMENT",
          "BOOKING_CONFIRMATION"
        ]
      },
      "OperationalDiscrepancyType": {
        "type": "string",
        "default": "TYPE_UNSPECIFIED",
        "enum": [
          "TYPE_UNSPECIFIED",
          "NB_OF_CONTAINERS_MISMATCH",
          "CONTAINER_TYPE_MISMATCH",
          "CONTAINER_SIZE_MISMATCH",
          "POL_MISMATCH",
          "POD_MISMATCH"
        ]
      },
      "OperationalDiscrepancy": {
        "type": "object",
        "description": "An operational discrepancy.\nContains the 2 entities compared (e.g. Shipment vs BookingConfirmation), and the resulting mismatch.",
        "properties": {
          "entity_1": {
            "$ref": "#/components/schemas/OperationalDiscrepancyEntity"
          },
          "entity_2": {
            "$ref": "#/components/schemas/OperationalDiscrepancyEntity"
          },
          "type": {
            "$ref": "#/components/schemas/OperationalDiscrepancyType"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TrackingStatus": {
        "type": "string",
        "default": "UNSPECIFIED",
        "enum": [
          "UNSPECIFIED",
          "NONE",
          "UNDER_PREPARATION",
          "INLAND_PRE_CARRIAGE",
          "AT_POL",
          "AT_SEA",
          "AT_POD",
          "INLAND_ON_CARRIAGE",
          "IN_TRANSSHIPMENT",
          "COMPLETED"
        ]
      },
      "ShipmentSummary": {
        "type": "object",
        "description": "Read-only, never used to update a shipment.\\n\"Up-to-date\" information, vs requirements, plan, booking, tracking...'",
        "properties": {
          "buyco_reference": {
            "type": "string",
            "description": "Buyco identifier for the shipment.",
            "example": "Q0219210015"
          },
          "shipment_created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the shipment was created (string ISO 8601)."
          },
          "external_id": {
            "type": "string",
            "description": "An optional external identifier."
          },
          "status": {
            "$ref": "#/components/schemas/ShipmentStatus"
          },
          "cutoff_dates": {
            "$ref": "#/components/schemas/MaritimeCutoffDates"
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          },
          "booking_status": {
            "$ref": "#/components/schemas/BookingStatus"
          },
          "booking_reference": {
            "type": "string",
            "description": "Booking reference (or booking number)."
          },
          "bill_of_lading_number": {
            "type": "string",
            "description": "Bill of lading number is an identifier that links to a shipment."
          },
          "times": {
            "$ref": "#/components/schemas/ShipmentTimes"
          },
          "container_snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerSnapshot"
            }
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShipmentSummaryParty"
            }
          },
          "incoterm": {
            "$ref": "#/components/schemas/RouteIncoterm"
          },
          "pol_unlocode": {
            "type": "string",
            "description": "UN/Locode of the Port of Loading (up-to-date)."
          },
          "pod_unlocode": {
            "type": "string",
            "description": "UN/Locode of the Port of Discharge (up-to-date)."
          },
          "first_voyage_number": {
            "type": "string",
            "description": "Voyage number of the first leg (up-to-date)."
          },
          "first_vessel_name": {
            "type": "string",
            "description": "Vessel name of the first leg (up-to-date)."
          },
          "legs": {
            "type": "array",
            "description": "Legs (up-to-date).",
            "items": {
              "$ref": "#/components/schemas/ShipmentSummaryLeg"
            }
          },
          "carrier_move_type": {
            "$ref": "#/components/schemas/RouteCarrierMoveType"
          },
          "rate": {
            "$ref": "#/components/schemas/ShipmentSummaryRate"
          },
          "discrepancies": {
            "type": "array",
            "description": "Any discrepancies found (calculated).",
            "items": {
              "$ref": "#/components/schemas/OperationalDiscrepancy"
            }
          },
          "tracking_status": {
            "$ref": "#/components/schemas/TrackingStatus"
          },
          "shipping_line": {
            "$ref": "#/components/schemas/Carrier"
          },
          "nvocc_booking_number": {
            "type": "string",
            "description": "Carrier NVOCC booking number."
          }
        }
      },
      "ShipmentSummaryRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/ShipmentSummary"
          }
        }
      },
      "NotFoundRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "Not found error"
          },
          "details": {
            "type": "string",
            "nullable": true,
            "example": null
          }
        }
      },
      "AsyncOperationState": {
        "type": "string",
        "enum": [
          "pending",
          "fulfilled"
        ],
        "example": "fulfilled"
      },
      "AsyncOperation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "organization_id": {
            "type": "integer"
          },
          "path": {
            "type": "string",
            "example": "/api/v2/container-snapshots/async-create",
            "description": "Path from which the operation was submitted."
          },
          "method": {
            "type": "string",
            "example": "POST",
            "description": "HTTP method used to submit the operation."
          },
          "payload": {
            "type": "string",
            "example": "{\"container_snapshots\":[{...}]}",
            "description": "Stringified JSON payload of the operation."
          },
          "state": {
            "$ref": "#/components/schemas/AsyncOperationState"
          },
          "http_code": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "OK",
            "description": "Contains OK or an error message."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AsyncOperationsRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsyncOperation"
            }
          }
        }
      },
      "AsyncOperationRes": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/AsyncOperation"
          }
        }
      },
      "AcceptedRes": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 202
          },
          "message": {
            "type": "string",
            "example": "Accepted - check /api/v2/async-operations/0001"
          }
        }
      },
      "ContainerSnapshotWithId": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Container's internal ID."
              }
            }
          },
          {
            "$ref": "#/components/schemas/ContainerSnapshot"
          }
        ]
      },
      "HttpResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "OK"
          }
        }
      },
      "GetContainerSnapshotRes": {
        "type": "object",
        "title": "Success",
        "properties": {
          "container_snapshot": {
            "$ref": "#/components/schemas/ContainerSnapshotWithId"
          },
          "http_response": {
            "$ref": "#/components/schemas/HttpResponse"
          }
        }
      },
      "HttpNotFoundRes": {
        "type": "object",
        "title": "Not found",
        "properties": {
          "http_response": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32",
                "example": 404
              },
              "message": {
                "type": "string",
                "example": "Not Found"
              }
            }
          }
        }
      },
      "AsyncOrganizationData": {
        "type": "object",
        "description": "An entity comprising of multiple people working towards a common goal.",
        "properties": {
          "external_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tax_identifier": {
            "type": "string",
            "description": "Tax or VAT identifier (i.e. US EIN)."
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "official_identifier": {
            "type": "string",
            "description": "Country or state identifier (i.e French SIRET)."
          }
        }
      },
      "AsyncOrganizationAddress": {
        "type": "object",
        "description": "A postal address in standard format.",
        "properties": {
          "line1": {
            "type": "string",
            "description": "Address line 1, use depends on the country's standard."
          },
          "line2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal/Post/ZIP code. Not in use in all countries."
          },
          "state": {
            "type": "string",
            "description": "State or province name. Not in use in all countries."
          },
          "country_code2": {
            "type": "string",
            "description": "ISO 2 letter country code."
          }
        }
      },
      "AsyncOrganizationAddressOnBillOfLading": {
        "type": "object",
        "description": "An address with short lines, suitable for use in a Bill of Lading.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "label": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "line3": {
            "type": "string"
          },
          "line4": {
            "type": "string"
          },
          "line5": {
            "type": "string"
          }
        }
      },
      "AsyncOrganization": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AsyncOrganizationData"
          },
          "postal_address": {
            "$ref": "#/components/schemas/AsyncOrganizationAddress"
          },
          "address_on_bl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AsyncOrganizationAddressOnBillOfLading"
            }
          }
        }
      },
      "PersonData": {
        "type": "object",
        "description": "A human being.",
        "properties": {
          "external_id": {
            "type": "string"
          },
          "organization_external_id": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "persons_Person": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PersonData"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedRes"
            }
          }
        }
      },
      "AcceptedResponse": {
        "description": "Successfully enqueued the action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AcceptedRes"
            }
          }
        }
      }
    }
  }
}
